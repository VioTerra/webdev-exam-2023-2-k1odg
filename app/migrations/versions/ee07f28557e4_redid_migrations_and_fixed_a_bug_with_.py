"""Redid migrations and fixed a bug with foreign key

Revision ID: ee07f28557e4
Revises: 
Create Date: 2023-06-20 20:35:58.857104

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ee07f28557e4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('genres',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genres')),
    sa.UniqueConstraint('name', name=op.f('uq_genres_name'))
    )
    op.create_table('images',
    sa.Column('id', sa.String(length=100), nullable=False),
    sa.Column('file_name', sa.String(length=100), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('md5_hash', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_images')),
    sa.UniqueConstraint('md5_hash', name=op.f('uq_images_md5_hash'))
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('desc', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('books',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('year', sa.String(length=4), nullable=False),
    sa.Column('publisher', sa.String(length=100), nullable=False),
    sa.Column('author', sa.String(length=100), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.Column('cover_id', sa.String(length=100), nullable=True),
    sa.Column('rating_sum', sa.Integer(), nullable=False),
    sa.Column('rating_num', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cover_id'], ['images.id'], name=op.f('fk_books_cover_id_images')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_books'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=200), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('login', name=op.f('uq_users_login'))
    )
    op.create_table('books_genres',
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('genre_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f('fk_books_genres_book_id_books')),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('fk_books_genres_genre_id_genres')),
    sa.PrimaryKeyConstraint('book_id', 'genre_id', name=op.f('pk_books_genres'))
    )
    op.create_table('reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('date_created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f('fk_reviews_book_id_books')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_reviews_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviews'))
    )
    # ### end Alembic commands ###
    roles_data_upgrades()
    users_data_upgrades()
    genres_data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews')
    op.drop_table('books_genres')
    op.drop_table('users')
    op.drop_table('books')
    op.drop_table('roles')
    op.drop_table('images')
    op.drop_table('genres')
    # ### end Alembic commands ###


def roles_data_upgrades():
    """Add any optional data upgrade migrations here!"""
    table = sa.sql.table('roles', sa.sql.column('name', sa.String), sa.sql.column('desc', sa.String))
    op.bulk_insert(table,
        [
            {'name': 'Администратор', 'desc': 'Суперпользователь, имеет полный доступ к системе, в том числе к созданию и удалению книг.'},
            {'name': 'Модератор', 'desc': 'Может редактировать данные книг и производить модерацию рецензий.'},
            {'name': 'Пользователь', 'desc': 'Может оставлять рецензии.'},
        ]
    )

def genres_data_upgrades():
    """Add any optional data upgrade migrations here!"""
    table = sa.sql.table('genres', sa.sql.column('name', sa.String))
    op.bulk_insert(table,
        [
            {'name': 'Фантастика'},
            {'name': 'Детектив'},
            {'name': 'Роман'},
            {'name': 'Классика'},
            {'name': 'Приключения'},
        ]
    )

from werkzeug.security import generate_password_hash
def users_data_upgrades():
    """Add any optional data upgrade migrations here!"""
    table = sa.sql.table('users', sa.sql.column('login', sa.String), sa.sql.column('password_hash', sa.String),sa.sql.column('last_name', sa.String),
        sa.sql.column('first_name', sa.String), sa.sql.column('middle_name', sa.String), sa.sql.column('role_id', sa.Integer))
    op.bulk_insert(table,
        [
            {'login': 'user1', 'password_hash': generate_password_hash('qwerty'), 'last_name': 'Иванов', 'first_name': 'Иван', 'middle_name': 'Иванович', 'role_id': 1},
            {'login': 'user2', 'password_hash': generate_password_hash('qwerty'), 'last_name': 'Петров', 'first_name': 'Петр', 'middle_name': 'Петрович', 'role_id': 2},
            {'login': 'user3', 'password_hash': generate_password_hash('qwerty'), 'last_name': 'Сидоров', 'first_name': 'Артем', 'middle_name': 'Сергеевич', 'role_id': 3},
        ]
    )